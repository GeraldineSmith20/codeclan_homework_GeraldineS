library(tidyverse)
library(infer)
animals <- data(msleep)
data(msleep)
force(msleep)
View(msleep)
msleep %>%
ggplot(aes(x = sleep_total)) +
geom_histogram()
msleep %>%
ggplot(aes(x = sleep_total)) +
geom_histogram(bins = 50)
observed_stat <- msleep %>%
summarise(mean_sleep = mean(sleep_total))
observed_stat
null_distribution <- msleep %>%
specify(response = sleep_total) %>%
hypothesis(null = "point", mu = 10.434) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean")
null_distribution <- msleep %>%
specify(response = sleep_total) %>%
hypothesise(null = "point", mu = 10.434) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean")
null_distribution
null_distribution %>%
visualise(bins = 30) +
shade_p_value(obs_stat = observed_stat$mean_sleep, direction = "both")
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stat$mean_sleep, direction = "both")
p_value <- null_distribution %>%
get_p_value(obs_stat = observed_stat$mean_sleep, direction = "both")
p_value
vore_comparison <- msleep %>%
filter(vore == "omni",
vore == "herbi")
ggplot(aes(y = sleep_total, x = vore)) +
geom_boxplot()
vore_comparison <- msleep %>%
filter(vore == "omni",
vore == "herbi") %>%
ggplot(aes(y = sleep_total, x = vore)) +
geom_boxplot()
vore_comparison <- msleep %>%
filter(vore == "omni",
vore == "herbi")
vore_comparison <- msleep %>%
filter(vore == "omni",
vore == "herbi")
vore_comparison %>%
ggplot(aes(y = sleep_total, x = vore)) +
geom_boxplot()
View(vore_comparison)
vore_comparison <- msleep %>%
filter(vore == "omni",
vore == "herbi")
vore_comparison %>%
ggplot(aes(y = sleep_total, x = vore)) +
geom_boxplot()
vore_comparison <- msleep %>%
filter(vore == "omni",
vore == "herbi")
vore_comparison <- msleep %>%
filter(vore == "omni")
#vore == "herbi")
vore_comparison <- msleep %>%
filter(vore == "omni" |
vore == "herbi")
vore_comparison %>%
ggplot(aes(y = sleep_total, x = vore)) +
geom_boxplot()
null_distribution <- vore_comparison %>%
specify(response = sleep_total, explanatory = vore) %>%
hypothesise(null = "independence") %>%
generate(reps = 10000, type = "permute") %>%
calculate(stat = "diff in means", order = c("omni", "herbi"))
null_distribution
observed_stat <- vore_comparison %>%
specify(response = sleep_total, explanatory = vore) %>%
calculate(stat = "diff in means", order = c("omni", "herbi"))
observed_stat
null_distribution %>%
visualise() +
shade_p_value(obs_stat = observed_stat, direction = "right")
null_distribution %>%
get_p_value(obs_stat = observed_stat, direction = "right")
domesticates <- msleep %>%
mutate(is_domesticated = ifelse(conservation == "domesticated", TRUE, FALSE))
View(domesticates)
domesticates %>%
group_by(is_domesticated) %>%
summarise(prop = n() / nrow(domesticates))
domesticates %>%
group_by(is_domesticated) %>%
summarise(prop = n() / nrow(domesticates)) %>%
filter(is_domesticated == TRUE)
prop_domesticated <- domesticates %>%
group_by(is_domesticated) %>%
summarise(prop = n() / nrow(domesticates)) %>%
filter(is_domesticated == TRUE)
domesticates <- msleep %>%
mutate(is_domesticated = ifelse(conservation == "domesticated", "TRUE", "FALSE"))
prop_domesticated <- domesticates %>%
group_by(is_domesticated) %>%
summarise(prop = n() / nrow(domesticates)) %>%
filter(is_domesticated == "TRUE")
null_distribution <- prop_domesticated %>%
specify(response = is_domesticated, success = "TRUE") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 5000, type = "simulate") %>%
calculate(stat = "prop")
null_distribution %>%
visualise(bins = 30)
null_distribution %>%
visualise(bins = 10)
null_distribution %>%
visualise(bins = 50)
View(prop_domesticated)
View(null_distribution)
prop_domesticated <- domesticates %>%
group_by(is_domesticated) %>%
summarise(prop = n() / nrow(domesticates)) %>%
filter(is_domesticated == TRUE)
null_distribution <- prop_domesticated %>%
specify(response = is_domesticated, success = TRUE) %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 5000, type = "simulate") %>%
calculate(stat = "prop")
domesticates <- msleep %>%
mutate(is_domesticated = ifelse(conservation == "domesticated", "domesticated", "not domesticated"))
prop_domesticated <- domesticates %>%
group_by(is_domesticated) %>%
summarise(prop = n() / nrow(domesticates)) %>%
filter(is_domesticated == "domesticated")
null_distribution <- prop_domesticated %>%
specify(response = is_domesticated, success = TRUE) %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 5000, type = "simulate") %>%
calculate(stat = "prop")
null_distribution <- prop_domesticated %>%
specify(response = is_domesticated, success = "domesticated") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 5000, type = "simulate") %>%
calculate(stat = "prop")
View(null_distribution)
View(domesticates)
domesticates <- msleep %>%
mutate(is_domesticated = ifelse(conservation == "domesticated", "domesticated", "not domesticated")) %>%
mutate(is_domesticated = ifelse(conservation = NA, "not domesticated", "domesticated"))
domesticates <- msleep %>%
mutate(is_domesticated = ifelse(conservation == "domesticated", "domesticated", "not domesticated")) %>%
mutate(is_domesticated = ifelse(conservation == NA, "not domesticated", "domesticated"))
domesticates <- msleep %>%
mutate(is_domesticated = ifelse(conservation == "domesticated", "domesticated", "not domesticated")) %>%
mutate(is_domesticated = ifelse(is.na(conservation) == TRUE, "not domesticated", is_domesticated))
prop_domesticated <- domesticates %>%
group_by(is_domesticated) %>%
summarise(prop = n() / nrow(domesticates)) %>%
filter(is_domesticated == "domesticated")
View(prop_domesticated)
null_distribution <- prop_domesticated %>%
specify(response = is_domesticated, success = "domesticated") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 5000, type = "simulate") %>%
calculate(stat = "prop")
null_distribution %>%
visualise(bins = 50)
null_distribution %>%
visualise(bins = 30)
View(null_distribution)
null_distribution <- domesticates %>%
specify(response = is_domesticated, success = "domesticated") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 5000, type = "simulate") %>%
calculate(stat = "prop")
null_distribution %>%
visualise(bins = 30)
null_distribution %>%
visualise(bins = 20)
null_distribution %>%
visualise(bins = 10)
observed_stat <- domesticates %>%
specify(response = is_domesticated, success = "domesticated") %>%
calculate(stat = "prop")
observed_stat
null_distribution %>%
get_p_value(obs_stat = observed_stat, direction = "right")
